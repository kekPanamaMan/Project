#include "macroanalysiswidget.h"

#include <QHeaderView>
#include <QFileDialog>
#include <QMessageBox>
#include <QRandomGenerator>


MacroAnalysisWidget::MacroAnalysisWidget(QWidget *parent) : QWidget(parent) { // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–∏–¥–∂–µ—Ç–∞ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    setupUI();
    setupConnections();
    fetchIndicators();
    fetchData();
}

void MacroAnalysisWidget::setupUI() {
    // --- –§–∏–ª—å—Ç—Ä—ã ---
    countryCombo = new QComboBox;
    countryCombo->setEditable(true);
    countryCombo->addItems({"–°–®–ê", "–ì–µ—Ä–º–∞–Ω–∏—è", "–ö–∏—Ç–∞–π", "–†–æ—Å—Å–∏—è", "–ë—Ä–∞–∑–∏–ª–∏—è"});
    countryCombo->setCurrentText("–°–®–ê");

    periodCombo = new QComboBox;
    periodCombo->addItems({"–ú–µ—Å—è—Ü", "–ö–≤–∞—Ä—Ç–∞–ª", "–ì–æ–¥", "–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ"});

    dateFromEdit = new QDateEdit(QDate::fromString("2019-01-01", "yyyy-MM-dd"));
    dateToEdit = new QDateEdit(QDate::currentDate());

    // –¢—Ä–∏ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    indicatorCombo1 = new QComboBox;
    indicatorCombo2 = new QComboBox;
    indicatorCombo3 = new QComboBox;
    indicatorCombo1->setEditable(true);
    indicatorCombo2->setEditable(true);
    indicatorCombo3->setEditable(true);

    // --- –ü—Ä–æ–≥–Ω–æ–∑ ---
    modelCombo = new QComboBox;
    modelCombo->addItems({"ARIMA", "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è"});
    paramSlider = new QSlider(Qt::Horizontal);
    paramSlider->setRange(1, 12);
    paramSlider->setValue(6);

    // --- –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ ---
    exportExcelBtn = new QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel");
    exportPdfBtn = new QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF");
    exportPngBtn = new QPushButton("–≠–∫—Å–ø–æ—Ä—Ç –≤ PNG");

    // --- –ì—Ä–∞—Ñ–∏–∫ ---
    chartView = new QCustomPlot(this);
    chartView->setMinimumHeight(320);

    // --- –¢–∞–±–ª–∏—Ü–∞ ---
    tableModel = new QStandardItemModel(this);
    proxyModel = new QSortFilterProxyModel(this);
    proxyModel->setSourceModel(tableModel);

    dataTable = new QTableView;
    dataTable->setModel(proxyModel);
    dataTable->setSortingEnabled(true);
    dataTable->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);

    // --- Layout ---
    QHBoxLayout *filtersLayout = new QHBoxLayout;
    filtersLayout->addWidget(new QLabel("–°—Ç—Ä–∞–Ω–∞/—Ä–µ–≥–∏–æ–Ω:"));
    filtersLayout->addWidget(countryCombo);
    filtersLayout->addWidget(new QLabel("–ü–µ—Ä–∏–æ–¥:"));
    filtersLayout->addWidget(periodCombo);
    filtersLayout->addWidget(new QLabel("–°:"));
    filtersLayout->addWidget(dateFromEdit);
    filtersLayout->addWidget(new QLabel("–ü–æ:"));
    filtersLayout->addWidget(dateToEdit);

    QHBoxLayout *indicatorsLayout = new QHBoxLayout;
    indicatorsLayout->addWidget(new QLabel("–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:"));
    indicatorsLayout->addWidget(indicatorCombo1);
    indicatorsLayout->addWidget(indicatorCombo2);
    indicatorsLayout->addWidget(indicatorCombo3);

    QHBoxLayout *forecastLayout = new QHBoxLayout;
    forecastLayout->addWidget(new QLabel("–ú–æ–¥–µ–ª—å:"));
    forecastLayout->addWidget(modelCombo);
    forecastLayout->addWidget(new QLabel("–ü–∞—Ä–∞–º–µ—Ç—Ä:"));
    forecastLayout->addWidget(paramSlider);

    QHBoxLayout *exportLayout = new QHBoxLayout;
    exportLayout->addWidget(exportExcelBtn);
    exportLayout->addWidget(exportPdfBtn);
    exportLayout->addWidget(exportPngBtn);

    QVBoxLayout *mainLayout = new QVBoxLayout(this);

    // --- –ö–Ω–æ–ø–∫–∞ "–ù–∞ –≥–ª–∞–≤–Ω—É—é" ---
    QPushButton *homeButton = new QPushButton("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é");
    homeButton->setStyleSheet("padding: 8px 16px; background-color: #4f8cff; color: white; border-radius: 8px;");
    connect(homeButton, &QPushButton::clicked, this, &MacroAnalysisWidget::goHome);
    mainLayout->addWidget(homeButton, 0, Qt::AlignLeft);

    mainLayout->addLayout(filtersLayout);
    mainLayout->addLayout(indicatorsLayout);
    mainLayout->addWidget(chartView);
    mainLayout->addLayout(forecastLayout);
    mainLayout->addWidget(dataTable);
    mainLayout->addLayout(exportLayout);

    setLayout(mainLayout);
}

void MacroAnalysisWidget::setupConnections() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    connect(countryCombo, &QComboBox::currentTextChanged, this, &MacroAnalysisWidget::fetchData);
    connect(periodCombo, &QComboBox::currentTextChanged, this, &MacroAnalysisWidget::fetchData);
    connect(dateFromEdit, &QDateEdit::dateChanged, this, &MacroAnalysisWidget::fetchData);
    connect(dateToEdit, &QDateEdit::dateChanged, this, &MacroAnalysisWidget::fetchData);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    connect(indicatorCombo1, &QComboBox::currentTextChanged, this, &MacroAnalysisWidget::updateChart);
    connect(indicatorCombo2, &QComboBox::currentTextChanged, this, &MacroAnalysisWidget::updateChart);
    connect(indicatorCombo3, &QComboBox::currentTextChanged, this, &MacroAnalysisWidget::updateChart);

    // –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    connect(modelCombo, &QComboBox::currentTextChanged, this, &MacroAnalysisWidget::showForecast);
    connect(paramSlider, &QSlider::valueChanged, this, &MacroAnalysisWidget::showForecast);

    // –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    connect(exportExcelBtn, &QPushButton::clicked, this, &MacroAnalysisWidget::exportData);
    connect(exportPdfBtn, &QPushButton::clicked, this, &MacroAnalysisWidget::exportData);
    connect(exportPngBtn, &QPushButton::clicked, this, &MacroAnalysisWidget::exportData);
}

void MacroAnalysisWidget::fetchIndicators() {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    QStringList indicators = {"–ò–Ω—Ñ–ª—è—Ü–∏—è", "–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞", "–í–í–ü", "–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞", "–î–æ–ª–≥"};
    indicatorCombo1->addItems(indicators);
    indicatorCombo2->addItems(indicators);
    indicatorCombo3->addItems(indicators);
    indicatorCombo1->setCurrentText("–ò–Ω—Ñ–ª—è—Ü–∏—è");
    indicatorCombo2->setCurrentText("–ö–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞");
    indicatorCombo3->setCurrentText("");
}

void MacroAnalysisWidget::fetchData() {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API (–ú–í–§, –í–ë –∏ —Ç.–¥.)
    // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    tableModel->clear();
    tableModel->setHorizontalHeaderLabels({"–î–∞—Ç–∞", "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", "–ó–Ω–∞—á–µ–Ω–∏–µ", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–°–æ–±—ã—Ç–∏–µ"});
    QDate start = dateFromEdit->date();
    QDate end = dateToEdit->date();
    int days = start.daysTo(end);

    for (int i = 0; i <= days; i += 30) {
        QDate d = start.addDays(i);
        QList<QStandardItem*> row;
        row << new QStandardItem(d.toString("yyyy-MM"));
        row << new QStandardItem("–ò–Ω—Ñ–ª—è—Ü–∏—è");
        row << new QStandardItem(QString::number(2.0 + QRandomGenerator::global()->bounded(3) + i*0.01, 'f', 2));
        row << new QStandardItem("–ú–í–§");
        row << new QStandardItem(i==90 ? "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –¶–ë" : "");
        tableModel->appendRow(row);
    }
    updateChart();
}

void MacroAnalysisWidget::updateChart() {
    chartView->clearGraphs(); // –°—Ç–µ—Ä–µ—Ç—å —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏

    chartView->legend->setVisible(true); // –ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–≥–µ–Ω–¥—É

    QStringList indicators = {indicatorCombo1->currentText(), indicatorCombo2->currentText(), indicatorCombo3->currentText()};
    QColor colors[3] = {Qt::blue, Qt::red, Qt::darkGreen};

    for (int idx = 0; idx < 3; ++idx) {
        if (indicators[idx].isEmpty()) continue;
        QVector<double> x, y;
        // –ü—Ä–æ—Ö–æ–¥ –ø–æ –¥–∞–Ω–Ω—ã–º –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ –≤—ã–±–æ—Ä–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
        for (int row = 0; row < tableModel->rowCount(); ++row) {
            QString name = tableModel->item(row, 1)->text();
            if (name == indicators[idx]) {
                QDate date = QDate::fromString(tableModel->item(row, 0)->text(), "yyyy-MM");
                x << date.toJulianDay();
                y << tableModel->item(row, 2)->text().toDouble();
            }
        }
        chartView->addGraph(); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        chartView->graph(idx)->setName(indicators[idx]);
        chartView->graph(idx)->setPen(QPen(colors[idx], 2));
        chartView->graph(idx)->setData(x, y);
    }
    chartView->xAxis->setLabel("–î–∞—Ç–∞");
    chartView->yAxis->setLabel("–ó–Ω–∞—á–µ–Ω–∏–µ");
    chartView->rescaleAxes(); // –û—Å–∏
    chartView->replot(); // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ (—Å–∏–≥–Ω–∞–ª –≤ MainWindow)
    int riskValue = 65;
    int riskChange = 2;
    QString description = "–†–æ—Å—Ç —Ä–∏—Å–∫–æ–≤ –∏–∑-–∑–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–≥–∏–æ–Ω–µ X";

    emit updateRisk(riskValue, riskChange, description);
}

void MacroAnalysisWidget::showForecast() {
    if (indicatorCombo1->currentText().isEmpty()) return;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3)
    while (chartView->graphCount() > 3) {
        chartView->removeGraph(chartView->graphCount() - 1);
    }

    QVector<double> realX, realY;

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–µ—Ä–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    const QCPGraphDataContainer *dataContainer = chartView->graph(0)->data().data();
    for (auto it = dataContainer->constBegin(); it != dataContainer->constEnd(); ++it) {
        realX.append(it->key);
        realY.append(it->value);
    }

    if (realX.isEmpty() || realY.isEmpty()) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    double lastX = realX.last();
    double lastY = realY.last();

    QVector<double> x, y;
    int steps = paramSlider->value(); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
    for (int i = 1; i <= steps; ++i) {
        x.append(lastX + i * 30);  // –Ω–∞–ø—Ä–∏–º–µ—Ä, —à–∞–≥ = 30 –¥–Ω–µ–π
        double delta = QRandomGenerator::global()->bounded(3.0) - 1.5;
        y.append(lastY + delta);
    }

    chartView->addGraph();
    chartView->graph()->setName("–ü—Ä–æ–≥–Ω–æ–∑");
    chartView->graph()->setPen(QPen(Qt::gray, 2, Qt::DashLine));
    chartView->graph()->setData(x, y);
    chartView->replot();
}
void MacroAnalysisWidget::exportData() {
    QPushButton *btn = qobject_cast<QPushButton*>(sender());
    if (btn == exportExcelBtn) {
        QString file = QFileDialog::getSaveFileName(this, "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", "", "*.xlsx");
        // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
        QMessageBox::information(this, "–≠–∫—Å–ø–æ—Ä—Ç", "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à—ë–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
    } else if (btn == exportPdfBtn) {
        QString file = QFileDialog::getSaveFileName(this, "–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", "", "*.pdf");
        // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
        QMessageBox::information(this, "–≠–∫—Å–ø–æ—Ä—Ç", "–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –∑–∞–≤–µ—Ä—à—ë–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
    } else if (btn == exportPngBtn) {
        QString file = QFileDialog::getSaveFileName(this, "–≠–∫—Å–ø–æ—Ä—Ç –≤ PNG", "", "*.png");
        // –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç
        QMessageBox::information(this, "–≠–∫—Å–ø–æ—Ä—Ç", "–≠–∫—Å–ø–æ—Ä—Ç –≤ PNG –∑–∞–≤–µ—Ä—à—ë–Ω (–∑–∞–≥–ª—É—à–∫–∞)");
    }
}

void MacroAnalysisWidget::loadData() {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—É—Å—Ç–æ
}
